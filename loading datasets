#pip install pafy
#sudo pip install --upgrade youtube_dl
import cv2, pafy


from youtubesearchpython import VideosSearch

videosSearch = VideosSearch('input("Enter your search")', limit = 30)
list search[]= videoSearch
for i in range(30):
 from pytube import YouTube

# URL of the YouTube video
video_url = 'https://www.youtube.com/watch?v='+search[i]'

# Create a YouTube object
yt = YouTube(video_url)

# Download the highest resolution stream
stream = yt.streams.get_highest_resolution()

# Specify the path where to save the video
stream.download(output_path="path_to_save", filename="downloaded_video.mp4")

import cv2

# Path to the downloaded video
input_video_path = "path_to_save/downloaded_video.mp4"
output_video_path = "path_to_save/output_video.avi"

# Open the video file
cap = cv2.VideoCapture(input_video_path)

# Check if the video was opened successfully
if not cap.isOpened():
    print("Error: Could not open video.")
    exit()

# Get the frame width, height, and frames per second (fps) from the input video
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)

# Define the codec and create VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'XVID')  # You can choose other codecs (e.g., 'MJPG', 'DIVX')
out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

# Process each frame and write it to the output video file
while True:
    ret, frame = cap.read()

    # If no frame is returned, break the loop
    if not ret:
        break

    # Write the frame to the output video
    out.write(frame)

    # Optionally, display the video
    cv2.imshow('Video', frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video objects and close any OpenCV windows
cap.release()
out.release()
cv2.destroyAllWindows()

import cv2
import os
import numpy as np

# Path to the downloaded video
input_video_path = "path_to_save/downloaded_video.mp4"
output_dataset_path = "path_to_save/dataset"

# Create the output directory for frames if it doesn't exist
if not os.path.exists(output_dataset_path):
    os.makedirs(output_dataset_path)

# Open the video file
cap = cv2.VideoCapture(input_video_path)

# Check if the video was opened successfully
if not cap.isOpened():
    print("Error: Could not open video.")
    exit()

frame_count = 0  # To keep track of frame numbers

# Loop through each frame in the video
while True:
    ret, frame = cap.read()

    # If no frame is returned, break the loop
    if not ret:
        break

    # Save the frame as an image
    frame_filename = os.path.join(output_dataset_path, f"frame_{frame_count:04d}.jpg")
    cv2.imwrite(frame_filename, frame)

    # Optionally: You can convert the frame to a numpy array
    # For example, add the frame to a list for dataset creation
    frame_array = np.array(frame)  # Shape (height, width, channels)
    
    # Here, you can store the frame in an array or use it directly for training
    # dataset.append(frame_array)

    # Increment the frame count
    frame_count += 1

# Release the video capture object
cap.release()

print(f"Frames have been saved to {output_dataset_path}")
# Load the saved numpy array
frames_np = np.load('video_frames.npy')

# Check the shape
print(f"Loaded frames shape: {frames_np.shape}")
import numpy as np

# Assuming frames_np is already loaded (numpy array with shape [num_frames, height, width, channels])
num_replicates = 3  # Number of times each frame is replicated

# Replicate each frame 'num_replicates' times
replicated_frames = np.tile(frames_np, (num_replicates, 1, 1, 1))  # Replicate along the 0-axis (frame dimension)

# Verify the shape of the replicated frames
print(f"Shape of replicated frames: {replicated_frames.shape}")
